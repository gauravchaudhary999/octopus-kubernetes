commands:
  create-update-account:
    description: |
      Create or update account in octopus. Requires environment variables for OCTOPUS_HOST, OCTOPUS_APIKEY and ACCOUNT_TOKEN. We recommend these be saved in a Project (https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project) or in Contexts (https://circleci.com/docs/2.0/contexts).
    parameters:
      account-description:
        default: ""
        description: account description.
        type: string
      account-name:
        default: ""
        description: account name, if not passed then account name will be same as
          env name.
        type: string
      account-token:
        default: ACCOUNT_TOKEN
        description: Environment Variable Name for account Token.
        type: env_var_name
      account-type:
        default: ""
        description: account type.
        type: string
      checkout:
        default: true
        description: |
          Boolean for whether or not to checkout as a first step. Default is true.
        type: boolean
      env-name:
        description: |
          environment name.
        type: string
      executor:
        default: default
        description: executor to use for this job
        type: executor
      octopus-apikey:
        default: OCTOPUS_APIKEY
        description: |
          Name of the environment variable which holds octopus apikey value.
        type: env_var_name
      octopus-host:
        default: OCTOPUS_HOST
        description: |
          Name of the environment variable which holds octopus host value.
        type: env_var_name
      space-name:
        default: Default
        description: Name of the space in octopus.
        type: string
    steps:
    - when:
        condition: <<parameters.checkout>>
        steps:
        - checkout
    - install-prerequisite
    - run:
        command: "SPACE_NAME=\"<<parameters.space-name>>\"\nENV_NAME=\"<<parameters.env-name>>\"\nACCOUNT_NAME=\"<<parameters.account-name>>\"\nACCOUNT_DESCRIPTION=\"<<parameters.account-description>>\"\nACCOUNT_TYPE=\"<<parameters.account-type>>\"\nACCOUNT_TOKEN_PARAM=\"<<parameters.account-token>>\"\n\n\nif
          [ -n \"${SPACE_NAME}\" ]; then\n  set -- \"$@\" --spaceName \"${SPACE_NAME}\"\nfi
          \ \nif [ -n \"${ENV_NAME}\" ]; then\n  set -- \"$@\" --envName \"${ENV_NAME}\"\nfi\nif
          [ -n \"${ACCOUNT_NAME}\" ]; then\n  set -- \"$@\" --accName \"${ACCOUNT_NAME}\"\nfi\nif
          [ -n \"${ACCOUNT_DESCRIPTION}\" ]; then\n  set -- \"$@\" --accDescription
          \"${ACCOUNT_DESCRIPTION}\"\nfi\nif [ -n \"${ACCOUNT_TYPE}\" ]; then\n  set
          -- \"$@\" --accountType \"${ACCOUNT_TYPE}\"\nfi\nif [ -n \"${ACCOUNT_TOKEN_PARAM}\"
          ]; then\n  set -- \"$@\" --tokenName \"${ACCOUNT_TOKEN_PARAM}\"\nfi\n\nexport
          \"<<parameters.octopus-host>>\"=\"$<<parameters.octopus-host>>\"\nexport
          \"<<parameters.octopus-apikey>>\"=\"$<<parameters.octopus-apikey>>\"\nexport
          \"<<parameters.account-token>>\"=\"$<<parameters.account-token>>\"\n\n$GOPATH/bin/k8socopus
          --cmd createOrUpdateAccount \"$@\""
        name: Create or update Account in octopus
  create-update-environment:
    description: |
      Create or update environment in octopus. Requires environment variables for OCTOPUS_HOST and OCTOPUS_APIKEY. We recommend these be saved in a Project (https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project) or in Contexts (https://circleci.com/docs/2.0/contexts).
    parameters:
      allow-dynamic-infrastructure:
        default: true
        description: environment allowDynamicInfrastructure.
        type: boolean
      checkout:
        default: true
        description: |
          Boolean for whether or not to checkout as a first step. Default is true.
        type: boolean
      env-description:
        default: ""
        description: |
          environment description.
        type: string
      env-name:
        description: |
          environment name.
        type: string
      env-sort-order:
        default: 0
        description: |
          environment sort order value.
        type: integer
      env-use-guided-failure:
        default: true
        description: |
          UseGuidedFailure flag.
        type: boolean
      executor:
        default: default
        description: executor to use for this job
        type: executor
      octopus-apikey:
        default: OCTOPUS_APIKEY
        description: |
          Name of the environment variable which holds octopus apikey value.
        type: env_var_name
      octopus-host:
        default: OCTOPUS_HOST
        description: |
          Name of the environment variable which holds octopus host value.
        type: env_var_name
      space-name:
        default: Default
        description: Name of the space in octopus.
        type: string
    steps:
    - when:
        condition: <<parameters.checkout>>
        steps:
        - checkout
    - install-prerequisite
    - run:
        command: "SPACE_NAME=\"<<parameters.space-name>>\"\nENV_NAME=\"<<parameters.env-name>>\"\nENV_DESCRIPTION=\"<<parameters.env-description>>\"\nENV_SORT_ORDER=<<parameters.env-sort-order>>\nENV_USE_GUIDED_FAILURE=<<parameters.env-use-guided-failure>>\nALLOW_DYNAMIC_INFRASTRUCTURE=<<parameters.allow-dynamic-infrastructure>>\n\nif
          [ -n \"${SPACE_NAME}\" ]; then\n  set -- \"$@\" --spaceName \"${SPACE_NAME}\"\nfi
          \ \nif [ -n \"${ENV_NAME}\" ]; then\n  set -- \"$@\" --envName \"${ENV_NAME}\"\nfi\nif
          [ -n \"${ENV_DESCRIPTION}\" ]; then\n  set -- \"$@\" --envDescription \"${ENV_DESCRIPTION}\"\nfi\nif
          [ -n \"${ENV_SORT_ORDER}\" ]; then\n  set -- \"$@\" --envSortOrder ${ENV_SORT_ORDER}\nfi\nif
          [ \"${ENV_USE_GUIDED_FAILURE}\" == \"true\" ]; then\n  set -- \"$@\" --envUseGuidedFailure\nfi\nif
          [ \"${ALLOW_DYNAMIC_INFRASTRUCTURE}\" == \"true\" ]; then\n  set -- \"$@\"
          --allowDynamicInfrastructure\nfi\n\nexport \"<<parameters.octopus-host>>\"=\"$<<parameters.octopus-host>>\"\nexport
          \"<<parameters.octopus-apikey>>\"=\"$<<parameters.octopus-apikey>>\"\n\n$GOPATH/bin/k8socopus
          --cmd createOrUpdateEnvironment \"$@\""
        name: Create or update Environment in octopus
  create-update-feed:
    description: |
      Create or update feed in octopus. Requires environment variables for OCTOPUS_HOST and OCTOPUS_APIKEY. We recommend these be saved in a Project (https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project) or in Contexts (https://circleci.com/docs/2.0/contexts).
    parameters:
      checkout:
        default: true
        description: |
          Boolean for whether or not to checkout as a first step. Default is true.
        type: boolean
      executor:
        default: default
        description: executor to use for this job
        type: executor
      feed-name:
        description: Name of the feed
        type: string
      feed-password:
        default: FEED_PASSWORD
        description: Name of the environment variable hodling the value of feed password.
        type: env_var_name
      feed-type:
        default: ""
        description: Feed Type
        type: string
      feed-url:
        description: Feed Url
        type: string
      feed-username:
        description: Feed Username
        type: string
      octopus-apikey:
        default: OCTOPUS_APIKEY
        description: |
          Name of the environment variable which holds octopus apikey value.
        type: env_var_name
      octopus-host:
        default: OCTOPUS_HOST
        description: |
          Name of the environment variable which holds octopus host value.
        type: env_var_name
      space-name:
        default: Default
        description: Name of the space in octopus.
        type: string
    steps:
    - when:
        condition: <<parameters.checkout>>
        steps:
        - checkout
    - install-prerequisite
    - run:
        command: |-
          SPACE_NAME="<<parameters.space-name>>"
          FEED_NAME="<<parameters.feed-name>>"
          FEED_URL="<<parameters.feed-url>>"
          FEED_TYPE="<<parameters.feed-type>>"
          FEED_USERNAME="<<parameters.feed-username>>"
          FEED_PASSWORD="<<parameters.feed-password>>"


          if [ -n "${SPACE_NAME}" ]; then
            set -- "$@" --spaceName "${SPACE_NAME}"
          fi
          if [ -n "${FEED_NAME}" ]; then
            set -- "$@" --feedName "${FEED_NAME}"
          fi
          if [ -n "${FEED_TYPE}" ]; then
            set -- "$@" --feedType "${FEED_TYPE}"
          fi
          if [ -n "${FEED_URL}" ]; then
            set -- "$@" --feedUri "${FEED_URL}"
          fi
          if [ -n "${FEED_USERNAME}" ]; then
            set -- "$@" --feedUserName "${FEED_USERNAME}"
          fi
          if [ -n "${FEED_PASSWORD}" ]; then
            set -- "$@" --feedPassword "${FEED_PASSWORD}"
          fi

          export "<<parameters.octopus-host>>"="$<<parameters.octopus-host>>"
          export "<<parameters.octopus-apikey>>"="$<<parameters.octopus-apikey>>"
          export "<<parameters.feed-password>>"="$<<parameters.feed-password>>"

          $GOPATH/bin/k8socopus --cmd createOrUpdateFeed "$@"
        name: Create or update feed in octopus
  create-update-lifecycle:
    description: |
      Create or update lifecycle in octopus. Requires environment variables for OCTOPUS_HOST and OCTOPUS_APIKEY. We recommend these be saved in a Project (https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project) or in Contexts (https://circleci.com/docs/2.0/contexts).
    parameters:
      checkout:
        default: true
        description: |
          Boolean for whether or not to checkout as a first step. Default is true.
        type: boolean
      executor:
        default: default
        description: executor to use for this job
        type: executor
      lifecycle-automatic-targets:
        description: A comma separated list of environment in a lifecycle in which
          application deploy automatically.
        type: string
      lifecycle-description:
        default: ""
        description: A lifecycle description.
        type: string
      lifecycle-name:
        description: A lifecycle name.
        type: string
      lifecycle-optional-targets:
        description: A comma separated list of environment in a lifecycle in which
          application can deploy optionally.
        type: string
      lifecycle-phases-order:
        description: A comma separated list of environment in order of lifecycle execution.
        type: string
      octopus-apikey:
        default: OCTOPUS_APIKEY
        description: |
          Name of the environment variable which holds octopus apikey value.
        type: env_var_name
      octopus-host:
        default: OCTOPUS_HOST
        description: |
          Name of the environment variable which holds octopus host value.
        type: env_var_name
      space-name:
        default: Default
        description: Name of the space in octopus.
        type: string
    steps:
    - when:
        condition: <<parameters.checkout>>
        steps:
        - checkout
    - install-prerequisite
    - run:
        command: |-
          SPACE_NAME="<<parameters.space-name>>"
          LIFECYCLE_NAME="<<parameters.lifecycle-name>>"
          LIFECYCLE_DESCRIPTION="<<parameters.lifecycle-description>>"
          LIFECYCLE_AUTOMATIC_TARGETS="<<parameters.lifecycle-automatic-targets>>"
          LIFECYCLE_OPTIONAL_TARGETS="<<parameters.lifecycle-optional-targets>>"
          LIFECYCLE_PHASES_ORDER="<<parameters.lifecycle-phases-order>>"

          if [ -n "${SPACE_NAME}" ]; then
            set -- "$@" --spaceName "${SPACE_NAME}"
          fi
          if [ -n "${LIFECYCLE_NAME}" ]; then
            set -- "$@" --lifecycleName "${LIFECYCLE_NAME}"
          fi
          if [ -n "${LIFECYCLE_DESCRIPTION}" ]; then
            set -- "$@" --lifecycleDescription "${LIFECYCLE_DESCRIPTION}"
          fi
          if [ -n "${LIFECYCLE_AUTOMATIC_TARGETS}" ]; then
            set -- "$@" --automaticTargets "${LIFECYCLE_AUTOMATIC_TARGETS}"
          fi
          if [ -n "${LIFECYCLE_OPTIONAL_TARGETS}" ]; then
            set -- "$@" --optionalTargets "${LIFECYCLE_OPTIONAL_TARGETS}"
          fi
          if [ -n "${LIFECYCLE_PHASES_ORDER}" ]; then
            set -- "$@" --phasesOrder "${LIFECYCLE_PHASES_ORDER}"
          fi

          export "<<parameters.octopus-host>>"="$<<parameters.octopus-host>>"
          export "<<parameters.octopus-apikey>>"="$<<parameters.octopus-apikey>>"

          $GOPATH/bin/k8socopus --cmd createOrUpdateLifecycle "$@"
        name: Create or update lifecycle in octopus
  create-update-machine:
    description: |
      Create or update machine in octopus. Requires environment variables for OCTOPUS_HOST, OCTOPUS_APIKEY and ACCOUNT_TOKEN. We recommend these be saved in a Project (https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project) or in Contexts (https://circleci.com/docs/2.0/contexts).
    parameters:
      account-description:
        default: ""
        description: account description.
        type: string
      account-name:
        default: ""
        description: account name, if not passed then account name will be same as
          env name.
        type: string
      account-token:
        default: ACCOUNT_TOKEN
        description: Environment Variable Name for account Token.
        type: env_var_name
      account-type:
        default: ""
        description: account type.
        type: string
      authentication-type:
        default: ""
        description: Machine AuthenticationType.
        type: string
      checkout:
        default: true
        description: |
          Boolean for whether or not to checkout as a first step. Default is true.
        type: boolean
      cluster-url:
        description: Machine cluster url.
        type: string
      env-name:
        description: |
          environment name.
        type: string
      executor:
        default: default
        description: executor to use for this job
        type: executor
      mac-communication-style:
        default: ""
        description: Machine CommunicationStyle.
        type: string
      machine-name:
        default: ""
        description: machine name, if not passed then machine name will same as env_name.
        type: string
      machine-role:
        default: ""
        description: A comma-separated string containing list of role.
        type: string
      octopus-apikey:
        default: OCTOPUS_APIKEY
        description: |
          Name of the environment variable which holds octopus apikey value.
        type: env_var_name
      octopus-host:
        default: OCTOPUS_HOST
        description: |
          Name of the environment variable which holds octopus host value.
        type: env_var_name
      skip-tls-verification:
        default: true
        description: Machine SkipTlsVerification.
        type: boolean
      space-name:
        default: Default
        description: Name of the space in octopus.
        type: string
      tenanted-deployment-participation:
        default: ""
        description: tenantedDeploymentParticipation.
        type: string
    steps:
    - when:
        condition: <<parameters.checkout>>
        steps:
        - checkout
    - install-prerequisite
    - run:
        command: "SPACE_NAME=\"<<parameters.space-name>>\"\nENV_NAME=\"<<parameters.env-name>>\"\nACCOUNT_NAME=\"<<parameters.account-name>>\"\n\nMACHINE_NAME=\"<<parameters.machine-name>>\"\nMACHINE_ROLE=\"<<parameters.machine-role>>\"\nTENANTED_DEPLOYMENT_PARTICIPATION=\"<<parameters.tenanted-deployment-participation>>\"\nMAC_COMMUNICATION_STYLE=\"<<parameters.mac-communication-style>>\"\nCLUSTER_URL=\"<<parameters.cluster-url>>\"\nAUTHENTICATION_TYPE=\"<<parameters.authentication-type>>\"\nSKIP_TLS_VERIFICATION=\"<<parameters.skip-tls-verification>>\"\n\nif
          [ -n \"${SPACE_NAME}\" ]; then\n  set -- \"$@\" --spaceName \"${SPACE_NAME}\"\nfi
          \ \nif [ -n \"${ENV_NAME}\" ]; then\n  set -- \"$@\" --envName \"${ENV_NAME}\"\nfi\nif
          [ -n \"${ACCOUNT_NAME}\" ]; then\n  set -- \"$@\" --accName \"${ACCOUNT_NAME}\"\nfi\nif
          [ -n \"${MACHINE_NAME}\" ]; then\n  set -- \"$@\" --macName \"${MACHINE_NAME}\"\nfi\nif
          [ -n \"${MACHINE_ROLE}\" ]; then\n  set -- \"$@\" --macRoles \"${MACHINE_ROLE}\"\nfi\nif
          [ -n \"${TENANTED_DEPLOYMENT_PARTICIPATION}\" ]; then\n  set -- \"$@\" --tenantedDeploymentParticipation
          \"${TENANTED_DEPLOYMENT_PARTICIPATION}\"\nfi\nif [ -n \"${MAC_COMMUNICATION_STYLE}\"
          ]; then\n  set -- \"$@\" --macCommunicationStyle \"${MAC_COMMUNICATION_STYLE}\"\nfi\nif
          [ -n \"${CLUSTER_URL}\" ]; then\n  set -- \"$@\" --clusterUrl \"${CLUSTER_URL}\"\nfi\nif
          [ -n \"${AUTHENTICATION_TYPE}\" ]; then\n  set -- \"$@\" --authenticationType
          \"${AUTHENTICATION_TYPE}\"\nfi\nif [ \"${SKIP_TLS_VERIFICATION}\" == \"true\"
          ]; then\n  set -- \"$@\" --macSkipTlsVerification\nfi\n\nexport \"<<parameters.octopus-host>>\"=\"$<<parameters.octopus-host>>\"\nexport
          \"<<parameters.octopus-apikey>>\"=\"$<<parameters.octopus-apikey>>\"\n\n$GOPATH/bin/k8socopus
          --cmd createOrUpdateMachine \"$@\""
        name: Create or update Machine in octopus
  create-update-space:
    description: |
      Create or update space in octopus. Requires environment variables for OCTOPUS_HOST and OCTOPUS_APIKEY. We recommend these be saved in a Project (https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project) or in Contexts (https://circleci.com/docs/2.0/contexts).
    parameters:
      checkout:
        default: true
        description: |
          Boolean for whether or not to checkout as a first step. Default is true.
        type: boolean
      executor:
        default: default
        description: executor to use for this job
        type: executor
      is-default:
        default: false
        description: IsDefault
        type: boolean
      octopus-apikey:
        default: OCTOPUS_APIKEY
        description: |
          Name of the environment variable which holds octopus apikey value.
        type: env_var_name
      octopus-host:
        default: OCTOPUS_HOST
        description: |
          Name of the environment variable which holds octopus host value.
        type: env_var_name
      space-description:
        default: ""
        description: Octopus space description
        type: string
      space-managers-team-members:
        default: teams-managers
        description: Comma separated list of space Managers Team Members
        type: string
      space-managers-teams:
        default: teams-managers
        description: A comma-separated string containing list of space managers teams
        type: string
      space-name:
        default: Default
        description: Name of the space in octopus.
        type: string
      task-queue-stopped:
        default: false
        description: TaskQueueStopped variable
        type: boolean
    steps:
    - when:
        condition: <<parameters.checkout>>
        steps:
        - checkout
    - install-prerequisite
    - run:
        command: "SPACE_NAME=\"<<parameters.space-name>>\"\nSPACE_DESCRIPTION=\"<<parameters.space-description>>\"\nIS_DEFAULT=<<parameters.is-default>>\nTASK_QUEUE_STOPPED=<<parameters.task-queue-stopped>>\nSPACE_MANAGERS_TEAM_MEMBERS=\"<<parameters.space-managers-team-members>>\"\nSPACE_MANAGERS_TEAMS=\"<<parameters.space-managers-teams>>\"\n\nif
          [ -n \"${SPACE_NAME}\" ]; then\n  set -- \"$@\" --spaceName \"${SPACE_NAME}\"\nfi
          \ \nif [ -n \"${SPACE_DESCRIPTION}\" ]; then\n  set -- \"$@\" --spaceDescription
          \"${SPACE_DESCRIPTION}\"\nfi\nif [ \"${IS_DEFAULT}\" == \"true\" ]; then\n
          \ set -- \"$@\" --isDefault\nfi\nif [ \"${TASK_QUEUE_STOPPED}\" == \"true\"
          ]; then\n  set -- \"$@\" --taskQueueStopped\nfi\nif [ -n \"${SPACE_MANAGERS_TEAM_MEMBERS}\"
          ]; then\n  set -- \"$@\" --spaceManagersTeamMembers \"${SPACE_MANAGERS_TEAM_MEMBERS}\"\nfi\n\nexport
          \"<<parameters.octopus-host>>\"=\"$<<parameters.octopus-host>>\"\nexport
          \"<<parameters.octopus-apikey>>\"=\"$<<parameters.octopus-apikey>>\"\n\n$GOPATH/bin/k8socopus
          --cmd createOrUpdateSpace \"$@\""
        name: Create or update space in octopus
  install-prerequisite:
    description: |
      Install go client - k8s-octopus
    steps:
    - run:
        command: go get github.com/gauravchaudhary999/k8s-octopus/k8socopus
        name: Install prerequisite
description: 'Create octopus resources through pipleline. See this orb''s source:
  https://github.com/gauravchaudhary999/octopus-kubernetes'
examples:
  setup-octopus-environment:
    description: |
      Create an environment in octopus.
    usage:
      orbs:
        octopus-kubernetes: utils/octopus-kubernetes@dev:alpha
      version: 2.1
      workflows:
        setup-octopus-environment:
          jobs:
          - octopus-kubernetes/setup-octopus-environment:
              action-template-name: helm-template-name,kong-template-name
              action-template-type: Helm, Kong
              cluster-url: dev-cluster-url,test-cluster-url,prod-cluster,url,
              env-name: dev,test,prod
              feed-name: sample-chart-museum
              feed-url: chart museum url
              lifecycle-automatic-targets: dev
              lifecycle-name: sample_lifecycle
              lifecycle-optional-targets: dev,test,prod
              lifecycle-phases-order: dev,test,prod
              space-name: Orb Name
executors:
  default:
    description: |
      CircleCI's executor for golang: https://circleci.com/docs/2.0/executor-types/#using-machine
    machine:
      image: <<parameters.image>>
    parameters:
      image:
        default: ubuntu-1604:201903-01
        type: string
jobs:
  configure-environment:
    description: |
      Configure the environment in octopus, which includes env, account and machine. Requires environment variables for OCTOPUS_HOST, OCTOPUS_APIKEY and ACCOUNT_TOKEN. We recommend these be saved in a Project (https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project) or in Contexts (https://circleci.com/docs/2.0/contexts).
    executor: <<parameters.executor>>
    parameters:
      account-description:
        default: ""
        description: account description.
        type: string
      account-name:
        default: ""
        description: account name, if not passed then account name will be same as
          env name.
        type: string
      account-token:
        default: ACCOUNT_TOKEN
        description: Environment Variable Name for account Token.
        type: env_var_name
      account-type:
        default: ""
        description: account type.
        type: string
      allow-dynamic-infrastructure:
        default: true
        description: environment allowDynamicInfrastructure.
        type: boolean
      authentication-type:
        default: ""
        description: Machine AuthenticationType.
        type: string
      checkout:
        default: true
        description: |
          Boolean for whether or not to checkout as a first step. Default is true.
        type: boolean
      cluster-url:
        description: Machine cluster url.
        type: string
      env-description:
        default: ""
        description: |
          environment description.
        type: string
      env-name:
        description: |
          environment name.
        type: string
      env-sort-order:
        default: 0
        description: |
          environment sort order value.
        type: integer
      env-use-guided-failure:
        default: true
        description: |
          UseGuidedFailure flag.
        type: boolean
      executor:
        default: default
        description: executor to use for this job
        type: executor
      mac-communication-style:
        default: ""
        description: Machine CommunicationStyle.
        type: string
      machine-name:
        default: ""
        description: machine name, if not passed then machine name will same as env_name.
        type: string
      machine-role:
        default: ""
        description: A comma-separated string containing list of role.
        type: string
      octopus-apikey:
        default: OCTOPUS_APIKEY
        description: |
          Name of the environment variable which holds octopus apikey value.
        type: env_var_name
      octopus-host:
        default: OCTOPUS_HOST
        description: |
          Name of the environment variable which holds octopus host value.
        type: env_var_name
      skip-tls-verification:
        default: true
        description: Machine SkipTlsVerification.
        type: boolean
      space-name:
        default: Default
        description: Name of the space in octopus.
        type: string
      tenanted-deployment-participation:
        default: ""
        description: tenantedDeploymentParticipation.
        type: string
    steps:
    - when:
        condition: <<parameters.checkout>>
        steps:
        - checkout
    - run:
        command: |
          curl -sSL "https://dl.google.com/go/go1.13.1.linux-amd64.tar.gz" | sudo tar -xz -C /usr/local/
              echo "export PATH=$PATH:/usr/local/go/bin" >> $BASH_ENV
        name: Install go
    - install-prerequisite
    - run:
        command: "\nSPACE_NAME=\"<<parameters.space-name>>\"\nENV_NAME=\"<<parameters.env-name>>\"\nENV_DESCRIPTION=\"<<parameters.env-description>>\"\nENV_SORT_ORDER=<<parameters.env-sort-order>>\nENV_USE_GUIDED_FAILURE=<<parameters.env-use-guided-failure>>\nALLOW_DYNAMIC_INFRASTRUCTURE=<<parameters.allow-dynamic-infrastructure>>\n\nACCOUNT_NAME=\"<<parameters.account-name>>\"\nACCOUNT_DESCRIPTION=\"<<parameters.account-description>>\"\nACCOUNT_TYPE=\"<<parameters.account-type>>\"\nACCOUNT_TOKEN_PARAM=\"<<parameters.account-token>>\"\n\nMACHINE_NAME=\"<<parameters.machine-name>>\"\nMACHINE_ROLE=\"<<parameters.machine-role>>\"\nTENANTED_DEPLOYMENT_PARTICIPATION=\"<<parameters.tenanted-deployment-participation>>\"\nMAC_COMMUNICATION_STYLE=\"<<parameters.mac-communication-style>>\"\nCLUSTER_URL=\"<<parameters.cluster-url>>\"\nAUTHENTICATION_TYPE=\"<<parameters.authentication-type>>\"\nSKIP_TLS_VERIFICATION=\"<<parameters.skip-tls-verification>>\"\n\nif
          [ -n \"${SPACE_NAME}\" ]; then\n  set -- \"$@\" --spaceName \"${SPACE_NAME}\"\nfi
          \ \nif [ -n \"${ENV_NAME}\" ]; then\n  set -- \"$@\" --envName \"${ENV_NAME}\"\nfi\nif
          [ -n \"${ENV_DESCRIPTION}\" ]; then\n  set -- \"$@\" --envDescription \"${ENV_DESCRIPTION}\"\nfi\nif
          [ -n \"${ENV_SORT_ORDER}\" ]; then\n  set -- \"$@\" --envSortOrder ${ENV_SORT_ORDER}\nfi\nif
          [ \"${ENV_USE_GUIDED_FAILURE}\" == \"true\" ]; then\n  set -- \"$@\" --envUseGuidedFailure\nfi\nif
          [ \"${ALLOW_DYNAMIC_INFRASTRUCTURE}\" == \"true\" ]; then\n  set -- \"$@\"
          --allowDynamicInfrastructure\nfi\nif [ -n \"${ACCOUNT_NAME}\" ]; then\n
          \ set -- \"$@\" --accName \"${ACCOUNT_NAME}\"\nfi\nif [ -n \"${ACCOUNT_DESCRIPTION}\"
          ]; then\n  set -- \"$@\" --accDescription \"${ACCOUNT_DESCRIPTION}\"\nfi\nif
          [ -n \"${ACCOUNT_TYPE}\" ]; then\n  set -- \"$@\" --accountType \"${ACCOUNT_TYPE}\"\nfi\nif
          [ -n \"${ACCOUNT_TOKEN_PARAM}\" ]; then\n  set -- \"$@\" --tokenName \"${ACCOUNT_TOKEN_PARAM}\"\nfi\nif
          [ -n \"${MACHINE_NAME}\" ]; then\n  set -- \"$@\" --macName \"${MACHINE_NAME}\"\nfi\nif
          [ -n \"${MACHINE_ROLE}\" ]; then\n  set -- \"$@\" --macRoles \"${MACHINE_ROLE}\"\nfi\nif
          [ -n \"${TENANTED_DEPLOYMENT_PARTICIPATION}\" ]; then\n  set -- \"$@\" --tenantedDeploymentParticipation
          \"${TENANTED_DEPLOYMENT_PARTICIPATION}\"\nfi\nif [ -n \"${MAC_COMMUNICATION_STYLE}\"
          ]; then\n  set -- \"$@\" --macCommunicationStyle \"${MAC_COMMUNICATION_STYLE}\"\nfi\nif
          [ -n \"${CLUSTER_URL}\" ]; then\n  set -- \"$@\" --clusterUrl \"${CLUSTER_URL}\"\nfi\nif
          [ -n \"${AUTHENTICATION_TYPE}\" ]; then\n  set -- \"$@\" --authenticationType
          \"${AUTHENTICATION_TYPE}\"\nfi\nif [ \"${SKIP_TLS_VERIFICATION}\" == \"true\"
          ]; then\n  set -- \"$@\" --macSkipTlsVerification\nfi\n\nexport \"<<parameters.octopus-host>>\"=\"$<<parameters.octopus-host>>\"\nexport
          \"<<parameters.octopus-apikey>>\"=\"$<<parameters.octopus-apikey>>\"\nexport
          \"<<parameters.account-token>>\"=\"$<<parameters.account-token>>\"\n\n$GOPATH/bin/k8socopus
          --cmd configureEnvironment \"$@\""
        name: Configure Environment (ENvironment, Account and Machine)
  setup-octopus-environment:
    description: |
      Setup the full environment in octopus required for deploying a Helm based Project. Requires environment variables for OCTOPUS_HOST and OCTOPUS_APIKEY. We recommend these be saved in a Project (https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project) or in Contexts (https://circleci.com/docs/2.0/contexts).
    executor: <<parameters.executor>>
    parameters:
      account-description:
        default: ""
        description: A comma-separated string containing list of account description.
        type: string
      account-name:
        default: ""
        description: A comma-separated string containing list of account name.
        type: string
      account-token:
        description: A comma-separated string containing list of Environment Variable
          Name for account Token.
        type: string
      account-type:
        default: ""
        description: A comma-separated string containing list of account type.
        type: string
      action-template-description:
        default: ""
        description: A comma-separated string containing list of action template description.
        type: string
      action-template-name:
        description: A comma-separated string containing list of action template name.
        type: string
      action-template-type:
        description: A comma-separated string containing list of action template type.
        type: string
      allow-dynamic-infrastructure:
        default: ""
        description: A comma-separated string containing list of environment allowDynamicInfrastructure.
        type: string
      authentication-type:
        default: ""
        description: A comma-separated string containing list of machine AuthenticationType.
        type: string
      checkout:
        default: true
        description: |
          Boolean for whether or not to checkout as a first step. Default is true.
        type: boolean
      cluster-url:
        description: A comma-separated string containing list of machine cluster url.
        type: string
      env-description:
        default: ""
        description: |
          A comma-separated string containing list of environment description .
        type: string
      env-name:
        description: |
          A comma-separated string containing list of environment name.
        type: string
      env-sort-order:
        default: ""
        description: |
          A comma-separated string containing list of environment sort order value.
        type: string
      env-use-guided-failure:
        default: ""
        description: |
          A comma-separated string containing list of environment UseGuidedFailure.
        type: string
      executor:
        default: default
        description: executor to use for this job
        type: executor
      feed-name:
        description: Name of the feed
        type: string
      feed-password:
        default: FEED_PASSWORD
        description: Name of the environment variable hodling the value of feed password.
        type: env_var_name
      feed-type:
        default: ""
        description: Feed Type
        type: string
      feed-url:
        description: Feed Url
        type: string
      feed-username:
        description: Feed Username
        type: string
      is-default:
        default: false
        description: IsDefault
        type: boolean
      lifecycle-automatic-targets:
        description: A comma separated list of environment in a lifecycle in which
          application deploy automatically.
        type: string
      lifecycle-description:
        default: ""
        description: A lifecycle description.
        type: string
      lifecycle-name:
        description: A lifecycle name.
        type: string
      lifecycle-optional-targets:
        description: A comma separated list of environment in a lifecycle in which
          application can deploy optionally.
        type: string
      lifecycle-phases-order:
        description: A comma separated list of environment in order of lifecycle execution.
        type: string
      mac-communication-style:
        default: ""
        description: A comma-separated string containing list of machine CommunicationStyle.
        type: string
      machine-name:
        default: ""
        description: A comma-separated string containing list of machine name.
        type: string
      machine-role:
        default: ""
        description: A comma-separated string containing list of machine role.
        type: string
      octopus-apikey:
        default: OCTOPUS_APIKEY
        description: |
          Name of the environment variable which holds octopus apikey value.
        type: env_var_name
      octopus-host:
        default: OCTOPUS_HOST
        description: |
          Name of the environment variable which holds octopus host value.
        type: env_var_name
      skip-tls-verification:
        default: ""
        description: A comma-separated string containing list of machine SkipTlsVerification.
        type: string
      space-description:
        default: ""
        description: Octopus space description
        type: string
      space-managers-team-members:
        default: teams-managers
        description: Comma separated list of space Managers Team Members
        type: string
      space-managers-teams:
        default: teams-managers
        description: A comma-separated string containing list of space managers teams
        type: string
      space-name:
        default: Default
        description: Name of the space in octopus.
        type: string
      task-queue-stopped:
        default: false
        description: TaskQueueStopped variable
        type: boolean
      tenanted-deployment-participation:
        default: ""
        description: A comma-separated string containing list of machine tenantedDeploymentParticipation.
        type: string
    steps:
    - when:
        condition: <<parameters.checkout>>
        steps:
        - checkout
    - run:
        command: |
          curl -sSL "https://dl.google.com/go/go1.13.1.linux-amd64.tar.gz" | sudo tar -xz -C /usr/local/
              echo "export PATH=$PATH:/usr/local/go/bin" >> $BASH_ENV
        name: Install go
    - install-prerequisite
    - run:
        command: |2-

          SPACE_NAME="<<parameters.space-name>>"
          SPACE_DESCRIPTION="<<parameters.space-description>>"
          IS_DEFAULT="<<parameters.is-default>>"
          TASK_QUEUE_STOPPED="<<parameters.task-queue-stopped>>"
          SPACE_MANAGERS_TEAM_MEMBERS="<<parameters.space-managers-team-members>>"
          SPACE_MANAGERS_TEAMS="<<parameters.space-managers-teams>>"

          ENV_NAME="<<parameters.env-name>>"
          ENV_DESCRIPTION="<<parameters.env-description>>"
          ENV_SORT_ORDER="<<parameters.env-sort-order>>"
          ENV_USE_GUIDED_FAILURE="<<parameters.env-use-guided-failure>>"
          ALLOW_DYNAMIC_INFRASTRUCTURE="<<parameters.allow-dynamic-infrastructure>>"

          ACCOUNT_NAME="<<parameters.account-name>>"
          ACCOUNT_DESCRIPTION="<<parameters.account-description>>"
          ACCOUNT_TYPE="<<parameters.account-type>>"
          ACCOUNT_TOKEN="<<parameters.account-token>>"

          MACHINE_NAME="<<parameters.machine-name>>"
          MACHINE_ROLE="<<parameters.machine-role>>"
          TENANTED_DEPLOYMENT_PARTICIPATION="<<parameters.tenanted-deployment-participation>>"
          MAC_COMMUNICATION_STYLE="<<parameters.mac-communication-style>>"
          CLUSTER_URL="<<parameters.cluster-url>>"
          AUTHENTICATION_TYPE="<<parameters.authentication-type>>"
          SKIP_TLS_VERIFICATION="<<parameters.skip-tls-verification>>"

          ACTION_TEMPLATE_NAME="<<parameters.action-template-name>>"
          ACTION_TEMPLATE_DESCRIPTION="<<parameters.action-template-description>>"
          ACTION_TEMPLATE_TYPE="<<parameters.action-template-type>>"

          LIFECYCLE_NAME="<<parameters.lifecycle-name>>"
          LIFECYCLE_DESCRIPTION="<<parameters.lifecycle-description>>"
          LIFECYCLE_AUTOMATIC_TARGETS="<<parameters.lifecycle-automatic-targets>>"
          LIFECYCLE_OPTIONAL_TARGETS="<<parameters.lifecycle-optional-targets>>"
          LIFECYCLE_PHASES_ORDER="<<parameters.lifecycle-phases-order>>"

          FEED_NAME="<<parameters.feed-name>>"
          FEED_URL="<<parameters.feed-url>>"
          FEED_TYPE="<<parameters.feed-type>>"
          FEED_USERNAME="<<parameters.feed-username>>"
          FEED_PASSWORD="<<parameters.feed-password>>"

          if [ -n "${SPACE_NAME}" ]; then
            set -- "$@" --spaceName "${SPACE_NAME}"
          fi

          if [ -n "${SPACE_DESCRIPTION}" ]; then
            set -- "$@" --spaceDescription "${SPACE_DESCRIPTION}"
          fi
          if [ "${IS_DEFAULT}" == "true" ]; then
            set -- "$@" --isDefault "${IS_DEFAULT}"
          fi
          if [ "${TASK_QUEUE_STOPPED}" == "true" ]; then
            set -- "$@" --taskQueueStopped "${TASK_QUEUE_STOPPED}"
          fi
          if [ -n "${SPACE_MANAGERS_TEAM_MEMBERS}" ]; then
            set -- "$@" --spaceManagersTeamMembers "${SPACE_MANAGERS_TEAM_MEMBERS}"
          fi
          if [ -n "${ENV_NAME}" ]; then
            set -- "$@" --envNameArr "${ENV_NAME}"
          fi
          if [ -n "${ENV_DESCRIPTION}" ]; then
            set -- "$@" --envDescriptionArr "${ENV_DESCRIPTION}"
          fi
          if [ -n "${ENV_SORT_ORDER}" ]; then
            set -- "$@" --envSortOrderArr "${ENV_SORT_ORDER}"
          fi
          if [ -n "${ENV_USE_GUIDED_FAILURE}" ]; then
            set -- "$@" --envUseGuidedFailureArr "${ENV_USE_GUIDED_FAILURE}"
          fi
          if [ -n "${ALLOW_DYNAMIC_INFRASTRUCTURE}" ]; then
            set -- "$@" --allowDynamicInfrastructureArr "${ALLOW_DYNAMIC_INFRASTRUCTURE}"
          fi
          if [ -n "${ACCOUNT_NAME}" ]; then
            set -- "$@" --accNameArr "${ACCOUNT_NAME}"
          fi
          if [ -n "${ACCOUNT_DESCRIPTION}" ]; then
            set -- "$@" --accDescriptionArr "${ACCOUNT_DESCRIPTION}"
          fi
          if [ -n "${ACCOUNT_TYPE}" ]; then
            set -- "$@" --accountTypeArr "${ACCOUNT_TYPE}"
          fi
          if [ -n "${ACCOUNT_TOKEN}" ]; then
            set -- "$@" --tokenNameArr "${ACCOUNT_TOKEN}"
          fi
          if [ -n "${MACHINE_NAME}" ]; then
            set -- "$@" --macNameArr "${MACHINE_NAME}"
          fi
          if [ -n "${MACHINE_ROLE}" ]; then
            set -- "$@" --macRolesArr "${MACHINE_ROLE}"
          fi
          if [ -n "${TENANTED_DEPLOYMENT_PARTICIPATION}" ]; then
            set -- "$@" --tenantedDeploymentParticipationArr "${TENANTED_DEPLOYMENT_PARTICIPATION}"
          fi
          if [ -n "${MAC_COMMUNICATION_STYLE}" ]; then
            set -- "$@" --macCommunicationStyleArr "${MAC_COMMUNICATION_STYLE}"
          fi
          if [ -n "${CLUSTER_URL}" ]; then
            set -- "$@" --clusterUrlArr "${CLUSTER_URL}"
          fi
          if [ -n "${AUTHENTICATION_TYPE}" ]; then
            set -- "$@" --authenticationTypeArr "${AUTHENTICATION_TYPE}"
          fi
          if [ -n "${SKIP_TLS_VERIFICATION}" ]; then
            set -- "$@" --macSkipTlsVerificationArr "${SKIP_TLS_VERIFICATION}"
          fi
          if [ -n "${ACTION_TEMPLATE_NAME}" ]; then
            set -- "$@" --atNameArr "${ACTION_TEMPLATE_NAME}"
          fi
          if [ -n "${ACTION_TEMPLATE_DESCRIPTION}" ]; then
            set -- "$@" --atDescriptionArr "${ACTION_TEMPLATE_DESCRIPTION}"
          fi
          if [ -n "${ACTION_TEMPLATE_TYPE}" ]; then
            set -- "$@" --actionTemplateTypeArr "${ACTION_TEMPLATE_TYPE}"
          fi
          if [ -n "${LIFECYCLE_NAME}" ]; then
            set -- "$@" --lifecycleName "${LIFECYCLE_NAME}"
          fi
          if [ -n "${LIFECYCLE_DESCRIPTION}" ]; then
            set -- "$@" --lifecycleDescription "${LIFECYCLE_DESCRIPTION}"
          fi
          if [ -n "${LIFECYCLE_AUTOMATIC_TARGETS}" ]; then
            set -- "$@" --automaticTargets "${LIFECYCLE_AUTOMATIC_TARGETS}"
          fi
          if [ -n "${LIFECYCLE_OPTIONAL_TARGETS}" ]; then
            set -- "$@" --optionalTargets "${LIFECYCLE_OPTIONAL_TARGETS}"
          fi
          if [ -n "${LIFECYCLE_PHASES_ORDER}" ]; then
            set -- "$@" --phasesOrder "${LIFECYCLE_PHASES_ORDER}"
          fi
          if [ -n "${FEED_NAME}" ]; then
            set -- "$@" --feedName "${FEED_NAME}"
          fi
          if [ -n "${FEED_TYPE}" ]; then
            set -- "$@" --feedType "${FEED_TYPE}"
          fi
          if [ -n "${FEED_URL}" ]; then
            set -- "$@" --feedUri "${FEED_URL}"
          fi
          if [ -n "${FEED_USERNAME}" ]; then
            set -- "$@" --feedUserName "${FEED_USERNAME}"
          fi
          if [ -n "${FEED_PASSWORD}" ]; then
            set -- "$@" --feedPassword "${FEED_PASSWORD}"
          fi

          export "<<parameters.feed-password>>"="$<<parameters.feed-password>>"
          export "<<parameters.account-token>>"="$<<parameters.account-token>>"
          export "<<parameters.octopus-host>>"="$<<parameters.octopus-host>>"
          export "<<parameters.octopus-apikey>>"="$<<parameters.octopus-apikey>>"

          $GOPATH/bin/k8socopus --cmd configureOctopus "$@"
        name: Configure Octopus Environment
version: 2.1

